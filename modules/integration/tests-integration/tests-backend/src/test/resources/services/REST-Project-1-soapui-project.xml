<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="82595621-676f-439e-a83e-31de7376f311" activeEnvironment="Default" name="REST Project 1" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="442c47cc-4ba2-45a9-bc22-95f23a229c4d" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9855" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://hasinthaindrajee:9855/</con:endpoint><con:endpoint>http://localhost:9855</con:endpoint></con:endpoints><con:resource name="Testing" path="/testing" id="28c4af26-27d6-4a30-b449-57a8c53d6c7f"><con:settings/><con:parameters/><con:method name="Testing" id="bd9e8f26-12a0-4141-8564-fba594b7f420" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="a5b93599-b2b2-4f3f-9a6c-3cdbcc2662f8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9855</con:endpoint><con:request/><con:originalUri>http://localhost/testing</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getTesting" path="/getTesting" id="6bca82a8-3e29-46fa-ae92-23c9cd07bae8"><con:settings/><con:parameters/><con:method name="Method 1" id="c131798d-7380-412d-a70f-d067e5ca9cca" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="b363bdb1-5939-4e79-b991-e41e55f5eb12" mediaType="application/json"><con:settings/><con:endpoint>http://hasinthaindrajee:9855/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="826791e6-2387-44cb-91c6-701b89242e55" port="9855" path="/" host="hasinthaindrajee" name="REST MockService 1"><con:settings/><con:properties/><con:restMockAction name="/testing" method="GET" resourcePath="/testing" id="e3b9573a-c348-4efc-bef9-4b99d6fbaff9"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3cc62bfd-0c92-4bb5-a1b3-51c04e28674c" httpResponseStatus="200" mediaType="application/xml"><con:settings/><con:script>requestContext.testInput = mockRequest.getHttpRequest().getParameter("text");
context.textOutput = mockRequest.getHttpRequest().getParameter("text"); </con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/getTesting" method="GET" resourcePath="/getTesting" id="52e7834b-5a1e-4c4e-9bf8-9032ab0881eb"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="59403c0b-ac33-4304-8693-544b90a7c9ef" httpResponseStatus="200"><con:settings/><con:responseContent>&lt;response>${textOutput}&lt;/response></con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>